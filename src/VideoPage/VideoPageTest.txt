Use this using youtube video api


import React, { useState, useEffect, useRef } from "react";
import Navbar from "../Components/Navbar";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faArrowLeft, faArrowRight } from "@fortawesome/free-solid-svg-icons";

const VideoPage = () => {
  const [videoUrl, setVideoUrl] = useState("");
  const [activeVideoId, setActiveVideoId] = useState(1);
  const [videoTitle, setVideoTitle] = useState("");
  const [actionItems, setActionItems] = useState([]);
  const [showContinueComponent, setShowContinueComponent] = useState(false);
  const playerRef = useRef(null);
  const timerRef = useRef(null);

  const videos = {
    html: [
      {
        id: 1,
        title: "1. Introduction to coding concept",
        url: "https://www.youtube.com/embed/3w5r1xHnumc",
        actionItems: [
          { text: "Newsletter for important updates", link: "#" },
          { text: "Follow for exclusive content", link: "#" },
          { text: "Leave a testimonial", link: "#" },
          { text: "Reach your income goals faster & easier", link: "#" },
        ],
      },
      {
        id: 2,
        title: "2. All you need to know about HTML",
        url: "https://www.youtube.com/embed/3pUAyhVJfQI",
        actionItems: [
          { text: "Join the HTML webinar", link: "https://example.com/webinar" },
          { text: "Download HTML cheat sheet", link: "https://example.com/cheatsheet" },
          { text: "Check out the HTML resources", link: "https://example.com/resources" },
        ],
      },
    ],
  };

  const handleVideoChange = (video) => {
    setVideoUrl(video.url);
    setActiveVideoId(video.id);
    setVideoTitle(video.title);
    setActionItems(video.actionItems);
    clearTimer();
  };

  const handleNextLesson = () => {
    const currentIndex = videos.html.findIndex((video) => video.id === activeVideoId);
    const nextIndex = (currentIndex + 1) % videos.html.length;
    const nextVideo = videos.html[nextIndex];
    handleVideoChange(nextVideo);
  };

  const handlePreviousLesson = () => {
    const currentIndex = videos.html.findIndex((video) => video.id === activeVideoId);
    const prevIndex = (currentIndex - 1 + videos.html.length) % videos.html.length;
    const prevVideo = videos.html[prevIndex];
    handleVideoChange(prevVideo);
  };

  const clearTimer = () => {
    if (timerRef.current) {
      clearTimeout(timerRef.current);
      timerRef.current = null;
    }
  };

  const onYouTubeIframeAPIReady = () => {
    playerRef.current = new window.YT.Player("youtube-player", {
      events: {
        onStateChange: onPlayerStateChange,
      },
    });
  };

  const onPlayerStateChange = (event) => {
    if (event.data === window.YT.PlayerState.PLAYING && !timerRef.current) {
      timerRef.current = setTimeout(() => {
        playerRef.current.pauseVideo();
        setShowContinueComponent(true);
      }, 120000); // 2 minutes in milliseconds
    }

    if (event.data === window.YT.PlayerState.PAUSED && timerRef.current) {
      clearTimer();
    }
  };

  useEffect(() => {
    if (!window.YT) {
      const tag = document.createElement("script");
      tag.src = "https://www.youtube.com/iframe_api";
      const firstScriptTag = document.getElementsByTagName("script")[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
      window.onYouTubeIframeAPIReady = onYouTubeIframeAPIReady;
    } else {
      onYouTubeIframeAPIReady();
    }

    return () => clearTimer();
  }, []);

  return (
    <>
      <Navbar />
      <div className="min-h-screen bg-gray-100">
        <main className="container mx-auto px-4 py-6 flex flex-col md:flex-row">
          <aside className="w-full md:w-1/4 bg-white p-4 shadow rounded mb-4 md:mb-0">
            <nav>
              <h2 className="font-semibold text-gray-700 mb-4">Free HTML Course</h2>
              <ul className="space-y-2 p-2">
                {videos.html.map((video) => (
                  <li
                    key={video.id}
                    className={`cursor-pointer p-2 rounded ${
                      activeVideoId === video.id ? "bg-blue-100 text-blue-700" : "text-gray-700"
                    } hover:bg-gray-200`}
                    onClick={() => handleVideoChange(video)}
                  >
                    {video.title}
                  </li>
                ))}
              </ul>
            </nav>
          </aside>
          <section className="w-full md:w-3/4 md:ml-4">
            <div className="bg-white p-4 shadow rounded mb-4">
              <h2 className="text-xl font-semibold text-gray-700 mb-4">{videoTitle}</h2>
              <div className="mb-4 h-full relative">
                <div className="relative" style={{ paddingBottom: "56.25%", height: 0 }}>
                  <iframe
                    id="youtube-player"
                    src={videoUrl}
                    title="Course Video"
                    frameBorder="0"
                    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                    allowFullScreen
                    className="absolute top-0 left-0 w-full h-full"
                  ></iframe>
                </div>
                {showContinueComponent && (
                  <div className="absolute top-0 left-0 w-full h-full bg-black bg-opacity-50 flex items-center justify-center">
                    <div className="bg-white p-4 rounded shadow-lg">
                      <p className="text-lg font-semibold mb-4">Do you want to continue watching?</p>
                      <button
                        className="px-4 py-2 bg-primary text-white rounded"
                        onClick={() => {
                          setShowContinueComponent(false);
                          playerRef.current.playVideo();
                        }}
                      >
                        Yes
                      </button>
                    </div>
                  </div>
                )}
              </div>
              <div className="mb-4">
                <h3 className="font-semibold text-gray-700">More from the Lesson:</h3>
                <ul className="list-decimal ml-4 mt-2">
                  {actionItems.map((item, index) => (
                    <li key={index}>
                      <a href={item.link} className="text-primary">
                        {item.text}
                      </a>
                    </li>
                  ))}
                </ul>
              </div>
              <div className="bg-gray-50 p-4 rounded">
                <p className="text-gray-600 text-sm">
                  <strong>Income Disclaimer:</strong> Our course material is provided for educational purposes only...
                </p>
              </div>
              <div className="flex justify-between mt-4">
                {activeVideoId > 1 && (
                  <button
                    className="px-4 py-2 bg-[#eee] text-gray-500 rounded-3xl hover:bg-primary-dark transition-transform duration-300 hover:translate-y-[-3px]"
                    onClick={handlePreviousLesson}
                  >
                    <FontAwesomeIcon icon={faArrowLeft} className="mr-2" />
                    Previous Lesson
                  </button>
                )}
                <button
                  className="px-4 py-2 bg-primary text-white rounded-3xl hover:bg-primary-dark transition-transform duration-300 hover:translate-y-[-3px]"
                  onClick={handleNextLesson}
                >
                  Next Lesson
                  <FontAwesomeIcon icon={faArrowRight} className="ml-2" />
                </button>
              </div>
            </div>
          </section>
        </main>
      </div>
    </>
  );
};

export default VideoPage;
